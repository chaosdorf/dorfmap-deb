#!/usr/bin/env perl

#%# family=auto
#%# capabilities=autoconf

use strict;
use warnings;
use 5.014;
use utf8;

use Encode qw(decode);
use File::Slurp qw(read_file write_file);
use JSON;    # automatically uses JSON::XS if available
use LWP::Simple;

no if $] >= 5.018, warnings => "experimental::smartmatch";

my $cache = '/tmp/dorfmap_all.json';
my ( $raw_json, $json );

if ( -e $cache and -M $cache < ( 1 / 1440 ) ) {
	$raw_json = read_file($cache);
}
else {
	$raw_json = get('http://dorfmap/list/all.json');
	write_file( $cache, $raw_json );
}

$json = from_json($raw_json);

if ( @ARGV and $ARGV[0] eq 'autoconf' ) {
	if ($json) {
		say 'yes';
		exit 0;
	}
	say 'no (unable to find a running dorfmap instance)';
	exit 0;
}

$0 =~ m{ / dorfmap _ (?<area> .+ ) $ }x
  or die("$0 must be called as dorfmap_<area>\n");

my $area = $+{area};

if ( @ARGV and $ARGV[0] eq 'config' ) {
	printf( "graph_title Dorfmap: %s\n",                  $area );
	printf( "graph_vlabel Anzahl Geraete\n",              $area );
	printf( "graph_info Dorfmap-Devices im Bereich %s\n", $area );
	say('graph_args -l -1 -u 1');
	say('graph_category other');
}

for my $id ( sort keys %{$json} ) {
	if (    $json->{$id}->{type}
		and $json->{$id}->{type} ~~
		[qw[amp blinkenlight printer switch light light_au]]
		and $json->{$id}->{area} eq $area )
	{
		if ( @ARGV and $ARGV[0] eq 'config' ) {
			printf( "%s.label %s\n", $id, $id );
			printf( "%s.draw AREASTACK\n", $id );
			printf( "%s.info %s\n",        $id, $json->{$id}->{desc} );
			printf( "%s.min 0\n",          $id );
			printf( "%s.max 1\n",          $id );
		}
		else {
			printf( "%s.value %d\n", $id, $json->{$id}->{status} );
		}
	}
}
