#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;

use File::Slurp qw(write_file);
use List::Util qw(sum);
use LWP::UserAgent;
use Net::MQTT::Simple;

our $VERSION = '0.01';

my $ua   = LWP::UserAgent->new;
my $mqtt = Net::MQTT::Simple->new('mqttserver');
$ua->timeout(5);

sub spew {
	my ( $file, $value ) = @_;

	return write_file( $file, { err_mode => 'quiet' }, "${value}\n" );
}

sub get_sensor {
	my ( $bus, $id, $ip, $name ) = @_;

	spew( "/tmp/${bus}/${id}", 1 );
	system( '/usr/lib/dorfmap/dorfbus-write', $bus );

	sleep(7);

	my @temps;
	my @brightness;

	for my $i ( 0 .. 12 ) {
		my $res = $ua->get("http://${ip}/");

		if ( $res->is_success ) {
			my $data = $res->content;
			my ($temp, $lsb) = ( $data =~ m{ temph = (\d+) \n templ = (\d+) }x );
			my ($brightness) = ( $data =~ m{ brightness = (\d+) \n }x );
			$temp += $lsb / 256;
			push( @temps,      $temp );
			push( @brightness, $brightness );
		}

		sleep(1);
	}

	if (@temps) {
		my $temp       = sum(@temps) / @temps;
		my $brightness = sum(@brightness) / @brightness;

		spew( "/srv/www/bgdata/${name}_temp",       $temp );
		spew( "/srv/www/bgdata/${name}_brightness", $brightness );
		$mqtt->publish("sensors/${name}/temperature" => sprintf( '%.3f', $temp ) );
		$mqtt->publish("sensors/${name}/brightness" => sprintf( '%.3f', $brightness ) );
	}

	spew( "/tmp/${bus}/${id}", 0 );
	system( '/usr/lib/dorfmap/dorfbus-write', $bus );
}

get_sensor( 'feedback3', '9',    '172.22.26.14', 'lounge_screen' );
get_sensor( 'feedback9', 'bin7', '172.22.26.15', 'hackcenter' );
get_sensor( 'feedback8', 'bin3', '172.22.26.16', 'maschinenraum' );
get_sensor( 'feedback6', 'bin0', '172.22.26.17', 'nomspace' );
